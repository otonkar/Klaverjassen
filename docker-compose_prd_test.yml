###
 # Docker compose for setup Django backend Only
 #
 # Docker compose file that belongs to tutorial
 # https://www.youtube.com/watch?v=nh1ynJGJuT8
 #
 # make and start:                      
 #    docker-compose -f docker-compose_prd_test.yml up --build
 #
 # Run an image in terminal
 #    docker run -it django-base /bin/sh
###

version: '3.8'

services:

  daphne:
    image: django-base
    container_name: klaverjas_daphne_prd    # specifies the name of the container that is created
    working_dir: /apps/back1
    restart: always
    ports:
      - "6000:6000"
    environment:
      - ENV=$ENV
      - SECRET_KEY=$SECRET_KEY
      - EMAIL_HOST=$EMAIL_HOST
      - EMAIL_USE_TLS=$EMAIL_USE_TLS
      - EMAIL_PORT=$EMAIL_PORT
      - EMAIL_HOST_USER=$EMAIL_HOST_USER
      - EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD
      - DEFAULT_FROM_EMAIL=$DEFAULT_FROM_EMAIL
      - DB_NAME=$DB_NAME
      - DB_USER=$DB_USER
      - DB_PASSWORD=$DB_PASSWORD
      - DB_HOST=$DB_HOST
      - DB_PORT=$DB_PORT
      - REDIS_HOST=$REDIS_HOST
    networks:
      - klaverjas_network
    volumes:                              
      - ./backend:/apps 
    command: sh -c "run_daphne_prd.sh"
    depends_on:
      - psql
      - redis
  
  psql:
    image: postgres
    container_name: klaverjas_psql_prd 
    restart: always
    ports:
      - "5432:5432"
    networks:
      - klaverjas_network
    environment:
      # - PGDATA=/var/lib/postgresql/data       # The folder in the image where the data is stored
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASSWORD
      - POSTGRES_DB=$DB_NAME
    volumes:
      - ./data/psql:/var/lib/postgresql/data        # store postgres data on a folder
      - ./data/backup:/tmp                          # store postgres backups in folder

  redis:
    image: redis
    container_name: klaverjas_redis_dev 
    networks:
      - klaverjas_network
    ports:
      - "6379:6379"

  nginx:
    build:
      context: ./frontend                   # path to the Dockerfile or URL to respository
      dockerfile: Dockerfile_nginx_prd      # default is Dockerfile
      args:
        - VUE_APP_URL_API_BASE              # Load environment variables
        - VUE_APP_URL_WEBSOCKET
    container_name: klaverjas_nginx_prd     # specifies the name of the container that is created
    image: klaverjas_nginx_prd
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "5000:5000"
    volumes:
      - ./frontend/nginx/conf.d/:/etc/nginx/conf.d/
      - ./frontend/nginx/log/:/var/log/nginx/
      - ./data/nginx/letsencrypt/:/etc/letsencrypt/
    networks:
      - klaverjas_network
    depends_on:
      - daphne 
      - psql

networks:
  klaverjas_network:

  
  # worker:
  #   image: django-base
  #   container_name: klaverjas_worker_prd    # specifies the name of the container that is created
  #   working_dir: /apps/back1
  #   restart: always
  #   environment:
  #     - ENV=$ENV
  #     - SECRET_KEY=$SECRET_KEY
  #     - EMAIL_HOST=$EMAIL_HOST
  #     - EMAIL_USE_TLS=$EMAIL_USE_TLS
  #     - EMAIL_PORT=$EMAIL_PORT
  #     - EMAIL_HOST_USER=$EMAIL_HOST_USER
  #     - EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD
  #     - DEFAULT_FROM_EMAIL=$DEFAULT_FROM_EMAIL
  #     - DB_NAME=$DB_NAME
  #     - DB_USER=$DB_USER
  #     - DB_PASSWORD=$DB_PASSWORD
  #     - DB_HOST=$DB_HOST
  #     - DB_PORT=$DB_PORT
  #     - REDIS_HOST=$REDIS_HOST
  #   networks:
  #     - klaverjas_network
  #   volumes:                              
  #     - ./backend:/apps 
  #   command: sh -c "python manage.py runworker"
  #   depends_on:
  #     - redis








