###
 # Set up a general python/django image for the a project
 # that can be used for django, daphne and its workers.
 #
 # Note:  this Dockerfile assumes that the django project manage.py is in the folder
 #      /apps/back1
 #
 # docker build -t django-base -f Dockerfile_django_base .
 # docker run -it django-base /bin/sh
 #
###

# pull official base image.
FROM python:3.8.3-alpine


# Prevents Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE 1
#Prevents Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED 1

# Create a folder for the django app and copy the backend folder to the apps folder
# Note, this Dockerfile is in the backend folder, so . refers to the backend folder
# manage.py will then be in /apps/back1
RUN mkdir /apps
COPY . /apps

# set working directory to the apps folder
# In the container the directory is changed to this workdir
WORKDIR /apps

# load the environment variables
# RUN source environment.env

# Make sure the scripts on the host are executable (777)
# Add your own backend/scripts folder to the path of the container
# Note make a separate /scripts folder that will NOT be mounted by docker-compose.
# Docker-compose will mount these volumes as 644, so these files cannot be executed by user or root
ENV PATH="/apps/scripts:${PATH}" 
# RUN mkdir -p /scripts
# COPY ./scripts /scripts
# RUN chmod +x /scripts/*

# Install some libraries that are needed to install the requirement.txt packages
RUN apk add --update --no-cache --virtual .tmp-build-deps \
      gcc \
      libc-dev \
      linux-headers \ 
      musl-dev 

      
      # 
      # zlib \
      # zlib-dev \
      # libressl-dev \
      # postgresql-client 

RUN apk update && apk add \
      libffi-dev \
      python3-dev \
      jpeg-dev \
      #libpq libpq-dev \
      postgresql-dev 


# Create the python environment with the pip installs
# !!!! comment out the "pkg-resources==0.0.0" in requirements.txt
RUN python -m pip install --upgrade pip
RUN pip install -r /apps/requirements.txt
RUN pip install psycopg2-binary
# RUN pip install gunicorn

# Clean up the virtual dependencies, to decrease the image size
RUN apk del \
    .tmp-build-deps 
    # libressl-dev \
    # musl-dev \
    # libffi-dev

# Create folders for the static and media files
RUN mkdir -p /vol/web/media
RUN mkdir -p /vol/web/static

RUN mkdir -p /apps/Klaverjassen/log
WORKDIR /apps/Klaverjassen/log
RUN touch klaverjas_login.txt
RUN touch klaverjas_registration.txt
RUN chmod 755 /apps/Klaverjassen/log

# Create an non root user
# Make sure the user that runs that application has read/write to the media/static folders
RUN adduser -D user
RUN chown -R user:user /vol
RUN chmod 755 /vol/web

# Change the user of this container to user
# Never use root the run the docker, because when the root user comprimised
# the attacker had access to the wholes container.
USER user

# Set the workdir to the folder that contains the manage.py
WORKDIR /apps/back1

# Give command to run a script that will start the application.
# Not needed when started with runserver in docker-compose
# This is the default command, but can be overruled by CMD in the docker-compose file
# There can only be 1 CMD that will be executed, either in the Dockerfile, or in docker-compose
# Do not use ENTRYPOINT because we want the complete command te be overruled, not only the parameters
CMD ["run_dev.sh"]


